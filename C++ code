#include<iostream.h>
#include<conio.h>
int support(char a[],int n,char D[][50],int a1[],int);
void sort(char *,int);
void Apriori(char D[][50],int count[],int sup,int n);
int Distinct(char D[][50],int count[],int n);
int compar(char a[],int ,char b[],int);
struct record
{
      
       char A[50][50];
       int sup[50];
       int size[50];
       int Len;
       };
int main()
{
    int n,count[50],j,i,sup;
    char D[50][50];
    cout<<"Enter Number of Transactions:\n";
    cin>>n;
    cout<<"Enter Data For DataBase:\n";
    for(i=0;i<n;i++)
    {
                    cout<<"Enter Number Of Items for Transaction: "<<i+1<<endl;
                    cin>>count[i];
                    cout<<"\nEnter Items For Transaction: "<<i+1<<endl;
                    for(j=0;j<count[i];j++)
                    {
                         cin>>D[i][j];
                         }
                         }
    cout<<"Data In The DataBase:\n";
    for(i=0;i<n;i++)
    sort(D[i],count[i]);
    for(i=0;i<n;i++)
    {
         cout<<"Item: "<<i+1<<" ---> {";
         for(j=0;j<count[i];j++)
         cout<<D[i][j]<<", ";
         cout<<"}"<<endl;
         }
         cout<<"\nEnter Support: ";
         cin>>sup;
         Apriori(D,count,sup,n);
         getch();
         return 0;
         }          
void sort(char D[],int n)
{
    int i,j;
    char ch;
    for(i=0;i<n;i++)
    for(j=0;j<n-i-1;j++)
    if(D[j]>D[j+1])
    {
     ch=D[j];
     D[j]=D[j+1];
     D[j+1]=ch;
     }
     }
void Apriori(char D[][50],int count[],int sup,int n)
{
     int c=0,i,j,Itr=0;
     char ch=65;
     char AllSet[200];
     c=Distinct(D,count,n);
     cout<<"\nDistinct Count: "<<c;
     record C[100];
     record L[100];
     int a[26];
     for(i=0;i<26;i++)
     a[i]=0;
     for(i=0;i<n;i++)
     {
     for(j=0;j<count[i];j++)
     {
     a[D[i][j]-65]++;
     }
     }
     for(j=0,i=0;i<26;i++)
     if(a[i]!=0)AllSet[j++]=ch+i;
     C[1].Len=0;
     for(j=0,i=0;i<c;i++)
     {
     C[1].A[i][0]=AllSet[j];
     C[1].sup[i]=a[AllSet[j++]-65];
     C[1].size[i]=1;
     C[1].Len++;
     }
     L[1].Len=0;
     for(j=0,i=0;i<c;i++)
     {
     if(C[1].sup[i]>=sup){                   
     L[1].A[j][0]=C[1].A[i][0];
     L[1].sup[j]=C[1].sup[i];
     L[1].size[j++]=1;
     L[1].Len++;
     }
     }
     cout<<"\n \nC1 Table Is:\n\n";
     for(i=0;i<c;i++)
     {
         cout<<C[1].A[i][0]<<"   "<<C[1].sup[i]<<endl;
         }
         cout<<"\n \nL1 Table Is:\n\n";
     for(i=0;i<L[1].Len;i++)
     {
         cout<<L[1].A[i][0]<<"   "<<L[1].sup[i]<<endl;
         }
     Itr=c-1;
     int k;
     k=1;
     int p,q,r,s;
     int flag=1;
     while(Itr)
     {
     C[k+1].Len=0; 
     flag=1;
          
     for(i=0;i<L[k].Len-1;i++)
     {
         for(j=i+1;j<L[k].Len;j++)
         { 
               for(p=0;p<k-1;p++)
               {
                  if(L[k].A[i][p]!=L[k].A[j][p])
                  {
                      flag=0;
                      break;                                                                                                  
                  }
                }
                if(flag&&(L[k].A[i][p]!=L[k].A[j][p]))
                {
                                                     
                for(q=0;q<k-1;q++)
                  {            
                     C[k+1].A[C[k+1].Len][q]=L[k].A[i][q];
                    }
                 C[k+1].A[C[k+1].Len][q]=L[k].A[i][q];
                
                 C[k+1].A[C[k+1].Len][q+1]=L[k].A[j][q];
                 C[k+1].sup[C[k+1].Len]=support(C[k+1].A[C[k+1].Len],k+1,D,count,n);
                 C[k+1].Len++;
                }
               
         }
               
         }
                L[k+1].Len=0;
                for(i=0;i<C[k+1].Len;i++)
                {
                if(C[k+1].sup[i]>=sup)
                  {        
                       L[k+1].sup[L[k+1].Len]=C[k+1].sup[i];                            
                       for(j=0;j<k+1;j++)
                       {
                          L[k+1].A[L[k+1].Len][j]=C[k+1].A[i][j];              
                          }
                    L[k+1].Len++;     
                   }
                }            
                if(L[k+1].Len==0)break;
        cout<<"\n ______________________________";
       
        cout<<"\n***** C"<<k+1<<" Table Is: *****\n";
        cout<<"\n ______________________________";
        cout<<"\n| ITEM_SET         |SUP_COUNT  |";
        cout<<"\n|__________________|___________|";                 
       
     for(i=0;i<C[k+1].Len;i++)
     {    cout<<endl<<" ";
          for(j=0;j<k+1;j++)                   
        cout<<C[k+1].A[i][j]<<"   ";
        cout<<"             "<<C[k+1].sup[i]; 
        cout<<"\n______________________________";
             
                  }
        cout<<"\n______________________________";
                 
        cout<<"\n***** L"<<k+1<<" Table Is: *****\n";
        cout<<"\n ______________________________";
        cout<<"\n| ITEM_SET         |SUP_COUNT  |";
        cout<<"\n|__________________|___________|";                 
       
     for(i=0;i<L[k+1].Len;i++)
     {    cout<<endl<<" ";
          for(j=0;j<k+1;j++)                   
        cout<<L[k+1].A[i][j]<<"   ";
        cout<<"             "<<L[k+1].sup[i];       
        cout<<"\n ______________________________";
       
                  }           
                 
                  k++;
                  Itr--;                                                                
     }
   
     
}        
int support(char s[],int n,char D[][50],int count[],int Tot_Rec)
{
    int i,j,k,tot=0;;
    for(i=0;i<Tot_Rec;i++)
    {
        tot+=compar(D[i],count[i],s,n);
        }
        return tot;
}
int compar(char a[],int l,char s[],int n)
{
    int i,j,k,c=0;
    for(i=0;i<n;i++)
    {
        for(j=0;j<l;j++)
        {
         if(s[i]==a[j])c++;
         if(c==n)return 1;
         }                                             
   }
   return 0;
}
int Distinct(char D[][50],int count[],int n)
{
    int a[26];
    int i,j,tot=0;
    char ch;
    for(i=0;i<26;i++)
    a[i]=0;
    for(i=0;i<n;i++)
    {
       for(j=0;j<count[i];j++)
       {
       ch=D[i][j];
       a[ch-65]++;
       tot++;
       }
       }
     cout<<"\nTotal Number Of Items Is: "<<tot<<endl;
     for(i=0;i<26;i++)
     {
      cout<<a[i]<<" ";
     if(a[i]>1)
     tot=tot-a[i]+1;
     }
    
     return tot;
     }                                 
